{"abi":[{"type":"function","name":"getInterfaceImplementer","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"_interfaceHash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getManager","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"implementsERC165Interface","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"implementsERC165InterfaceNoCache","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"interfaceHash","inputs":[{"name":"interfaceName","type":"string","internalType":"string"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"pure"},{"type":"function","name":"setInterfaceImplementer","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"_interfaceHash","type":"bytes32","internalType":"bytes32"},{"name":"implementer","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setManager","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"newManager","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateERC165Cache","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"InterfaceImplementerSet","inputs":[{"name":"account","type":"address","indexed":true,"internalType":"address"},{"name":"interfaceHash","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"implementer","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ManagerChanged","inputs":[{"name":"account","type":"address","indexed":true,"internalType":"address"},{"name":"newManager","type":"address","indexed":true,"internalType":"address"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getInterfaceImplementer(address,bytes32)":"aabbb8ca","getManager(address)":"3d584063","implementsERC165Interface(address,bytes4)":"f712f3e8","implementsERC165InterfaceNoCache(address,bytes4)":"b7056765","interfaceHash(string)":"65ba36c1","setInterfaceImplementer(address,bytes32,address)":"29965a1d","setManager(address,address)":"5df8122f","updateERC165Cache(address,bytes4)":"a41e7d51"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"interfaceHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"InterfaceImplementerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_interfaceHash\",\"type\":\"bytes32\"}],\"name\":\"getInterfaceImplementer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"implementsERC165Interface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"implementsERC165InterfaceNoCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"interfaceName\",\"type\":\"string\"}],\"name\":\"interfaceHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_interfaceHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"implementer\",\"type\":\"address\"}],\"name\":\"setInterfaceImplementer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"updateERC165Cache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the global ERC1820 Registry, as defined in the https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register implementers for interfaces in this registry, as well as query support. Implementers may be shared by multiple accounts, and can also implement more than a single interface for each account. Contracts can implement interfaces for themselves, but externally-owned accounts (EOA) must delegate this to a contract. {IERC165} interfaces can also be queried via the registry. For an in-depth explanation and source code analysis, see the EIP text.\",\"kind\":\"dev\",\"methods\":{\"getInterfaceImplementer(address,bytes32)\":{\"details\":\"Returns the implementer of `interfaceHash` for `account`. If no such implementer is registered, returns the zero address. If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28 zeroes), `account` will be queried for support of it. `account` being the zero address is an alias for the caller's address.\"},\"getManager(address)\":{\"details\":\"Returns the manager for `account`. See {setManager}.\"},\"implementsERC165Interface(address,bytes4)\":{\"params\":{\"account\":\"Address of the contract to check.\",\"interfaceId\":\"ERC165 interface to check.\"},\"returns\":{\"_0\":\"True if `account` implements `interfaceId`, false otherwise.\"}},\"implementsERC165InterfaceNoCache(address,bytes4)\":{\"params\":{\"account\":\"Address of the contract to check.\",\"interfaceId\":\"ERC165 interface to check.\"},\"returns\":{\"_0\":\"True if `account` implements `interfaceId`, false otherwise.\"}},\"interfaceHash(string)\":{\"details\":\"Returns the interface hash for an `interfaceName`, as defined in the corresponding https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\"},\"setInterfaceImplementer(address,bytes32,address)\":{\"details\":\"Sets the `implementer` contract as ``account``'s implementer for `interfaceHash`. `account` being the zero address is an alias for the caller's address. The zero address can also be used in `implementer` to remove an old one. See {interfaceHash} to learn how these are created. Emits an {InterfaceImplementerSet} event. Requirements: - the caller must be the current manager for `account`. - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not end in 28 zeroes). - `implementer` must implement {IERC1820Implementer} and return true when queried for support, unless `implementer` is the caller. See {IERC1820Implementer-canImplementInterfaceForAddress}.\"},\"setManager(address,address)\":{\"details\":\"Sets `newManager` as the manager for `account`. A manager of an account is able to set interface implementers for it. By default, each account is its own manager. Passing a value of `0x0` in `newManager` will reset the manager to this initial state. Emits a {ManagerChanged} event. Requirements: - the caller must be the current manager for `account`.\"},\"updateERC165Cache(address,bytes4)\":{\"params\":{\"account\":\"Address of the contract for which to update the cache.\",\"interfaceId\":\"ERC165 interface for which to update the cache.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"implementsERC165Interface(address,bytes4)\":{\"notice\":\"Checks whether a contract implements an ERC165 interface or not. If the result is not cached a direct lookup on the contract address is performed. If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling {updateERC165Cache} with the contract address.\"},\"implementsERC165InterfaceNoCache(address,bytes4)\":{\"notice\":\"Checks whether a contract implements an ERC165 interface or not without using or updating the cache.\"},\"updateERC165Cache(address,bytes4)\":{\"notice\":\"Updates the cache with whether the contract implements an ERC165 interface or not.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/@openzeppelin/contracts/interfaces/IERC1820Registry.sol\":\"IERC1820Registry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/@openzeppelin/contracts/interfaces/IERC1820Registry.sol\":{\"keccak256\":\"0x40fa7b800a6e175b5ec489b9539a602267150128b4ed87ffb865abff4bea50f6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f160cfab00774daa2550a0209522ecf23835176f75f2a575c009fef1b1d0c101\",\"dweb:/ipfs/QmdXnx2aULLSzG2nzicRPSmJfp3QUyBFc7shR6ZQLu1inN\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address","indexed":true},{"internalType":"bytes32","name":"interfaceHash","type":"bytes32","indexed":true},{"internalType":"address","name":"implementer","type":"address","indexed":true}],"type":"event","name":"InterfaceImplementerSet","anonymous":false},{"inputs":[{"internalType":"address","name":"account","type":"address","indexed":true},{"internalType":"address","name":"newManager","type":"address","indexed":true}],"type":"event","name":"ManagerChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"_interfaceHash","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getInterfaceImplementer","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"getManager","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"implementsERC165Interface","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"implementsERC165InterfaceNoCache","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"string","name":"interfaceName","type":"string"}],"stateMutability":"pure","type":"function","name":"interfaceHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"_interfaceHash","type":"bytes32"},{"internalType":"address","name":"implementer","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setInterfaceImplementer"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"newManager","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setManager"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"nonpayable","type":"function","name":"updateERC165Cache"}],"devdoc":{"kind":"dev","methods":{"getInterfaceImplementer(address,bytes32)":{"details":"Returns the implementer of `interfaceHash` for `account`. If no such implementer is registered, returns the zero address. If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28 zeroes), `account` will be queried for support of it. `account` being the zero address is an alias for the caller's address."},"getManager(address)":{"details":"Returns the manager for `account`. See {setManager}."},"implementsERC165Interface(address,bytes4)":{"params":{"account":"Address of the contract to check.","interfaceId":"ERC165 interface to check."},"returns":{"_0":"True if `account` implements `interfaceId`, false otherwise."}},"implementsERC165InterfaceNoCache(address,bytes4)":{"params":{"account":"Address of the contract to check.","interfaceId":"ERC165 interface to check."},"returns":{"_0":"True if `account` implements `interfaceId`, false otherwise."}},"interfaceHash(string)":{"details":"Returns the interface hash for an `interfaceName`, as defined in the corresponding https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP]."},"setInterfaceImplementer(address,bytes32,address)":{"details":"Sets the `implementer` contract as ``account``'s implementer for `interfaceHash`. `account` being the zero address is an alias for the caller's address. The zero address can also be used in `implementer` to remove an old one. See {interfaceHash} to learn how these are created. Emits an {InterfaceImplementerSet} event. Requirements: - the caller must be the current manager for `account`. - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not end in 28 zeroes). - `implementer` must implement {IERC1820Implementer} and return true when queried for support, unless `implementer` is the caller. See {IERC1820Implementer-canImplementInterfaceForAddress}."},"setManager(address,address)":{"details":"Sets `newManager` as the manager for `account`. A manager of an account is able to set interface implementers for it. By default, each account is its own manager. Passing a value of `0x0` in `newManager` will reset the manager to this initial state. Emits a {ManagerChanged} event. Requirements: - the caller must be the current manager for `account`."},"updateERC165Cache(address,bytes4)":{"params":{"account":"Address of the contract for which to update the cache.","interfaceId":"ERC165 interface for which to update the cache."}}},"version":1},"userdoc":{"kind":"user","methods":{"implementsERC165Interface(address,bytes4)":{"notice":"Checks whether a contract implements an ERC165 interface or not. If the result is not cached a direct lookup on the contract address is performed. If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling {updateERC165Cache} with the contract address."},"implementsERC165InterfaceNoCache(address,bytes4)":{"notice":"Checks whether a contract implements an ERC165 interface or not without using or updating the cache."},"updateERC165Cache(address,bytes4)":{"notice":"Updates the cache with whether the contract implements an ERC165 interface or not."}},"version":1}},"settings":{"remappings":["ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/@openzeppelin/contracts/interfaces/IERC1820Registry.sol":"IERC1820Registry"},"evmVersion":"paris","libraries":{}},"sources":{"src/@openzeppelin/contracts/interfaces/IERC1820Registry.sol":{"keccak256":"0x40fa7b800a6e175b5ec489b9539a602267150128b4ed87ffb865abff4bea50f6","urls":["bzz-raw://f160cfab00774daa2550a0209522ecf23835176f75f2a575c009fef1b1d0c101","dweb:/ipfs/QmdXnx2aULLSzG2nzicRPSmJfp3QUyBFc7shR6ZQLu1inN"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"src/@openzeppelin/contracts/interfaces/IERC1820Registry.sol","id":88799,"exportedSymbols":{"IERC1820Registry":[88798]},"nodeType":"SourceUnit","src":"115:4714:177","nodes":[{"id":88710,"nodeType":"PragmaDirective","src":"115:24:177","nodes":[],"literals":["solidity","^","0.8",".20"]},{"id":88798,"nodeType":"ContractDefinition","src":"761:4067:177","nodes":[{"id":88719,"nodeType":"EventDefinition","src":"794:115:177","nodes":[],"anonymous":false,"eventSelector":"93baa6efbd2244243bfee6ce4cfdd1d04fc4c0e9a786abd3a41313bd352db153","name":"InterfaceImplementerSet","nameLocation":"800:23:177","parameters":{"id":88718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88713,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"840:7:177","nodeType":"VariableDeclaration","scope":88719,"src":"824:23:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":88712,"name":"address","nodeType":"ElementaryTypeName","src":"824:7:177","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":88715,"indexed":true,"mutability":"mutable","name":"interfaceHash","nameLocation":"865:13:177","nodeType":"VariableDeclaration","scope":88719,"src":"849:29:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":88714,"name":"bytes32","nodeType":"ElementaryTypeName","src":"849:7:177","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":88717,"indexed":true,"mutability":"mutable","name":"implementer","nameLocation":"896:11:177","nodeType":"VariableDeclaration","scope":88719,"src":"880:27:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":88716,"name":"address","nodeType":"ElementaryTypeName","src":"880:7:177","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"823:85:177"}},{"id":88725,"nodeType":"EventDefinition","src":"915:74:177","nodes":[],"anonymous":false,"eventSelector":"605c2dbf762e5f7d60a546d42e7205dcb1b011ebc62a61736a57c9089d3a4350","name":"ManagerChanged","nameLocation":"921:14:177","parameters":{"id":88724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88721,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"952:7:177","nodeType":"VariableDeclaration","scope":88725,"src":"936:23:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":88720,"name":"address","nodeType":"ElementaryTypeName","src":"936:7:177","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":88723,"indexed":true,"mutability":"mutable","name":"newManager","nameLocation":"977:10:177","nodeType":"VariableDeclaration","scope":88725,"src":"961:26:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":88722,"name":"address","nodeType":"ElementaryTypeName","src":"961:7:177","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"935:53:177"}},{"id":88733,"nodeType":"FunctionDefinition","src":"1445:66:177","nodes":[],"documentation":{"id":88726,"nodeType":"StructuredDocumentation","src":"995:445:177","text":" @dev Sets `newManager` as the manager for `account`. A manager of an\n account is able to set interface implementers for it.\n By default, each account is its own manager. Passing a value of `0x0` in\n `newManager` will reset the manager to this initial state.\n Emits a {ManagerChanged} event.\n Requirements:\n - the caller must be the current manager for `account`."},"functionSelector":"5df8122f","implemented":false,"kind":"function","modifiers":[],"name":"setManager","nameLocation":"1454:10:177","parameters":{"id":88731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88728,"mutability":"mutable","name":"account","nameLocation":"1473:7:177","nodeType":"VariableDeclaration","scope":88733,"src":"1465:15:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":88727,"name":"address","nodeType":"ElementaryTypeName","src":"1465:7:177","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":88730,"mutability":"mutable","name":"newManager","nameLocation":"1490:10:177","nodeType":"VariableDeclaration","scope":88733,"src":"1482:18:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":88729,"name":"address","nodeType":"ElementaryTypeName","src":"1482:7:177","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1464:37:177"},"returnParameters":{"id":88732,"nodeType":"ParameterList","parameters":[],"src":"1510:0:177"},"scope":88798,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":88741,"nodeType":"FunctionDefinition","src":"1612:69:177","nodes":[],"documentation":{"id":88734,"nodeType":"StructuredDocumentation","src":"1517:90:177","text":" @dev Returns the manager for `account`.\n See {setManager}."},"functionSelector":"3d584063","implemented":false,"kind":"function","modifiers":[],"name":"getManager","nameLocation":"1621:10:177","parameters":{"id":88737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88736,"mutability":"mutable","name":"account","nameLocation":"1640:7:177","nodeType":"VariableDeclaration","scope":88741,"src":"1632:15:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":88735,"name":"address","nodeType":"ElementaryTypeName","src":"1632:7:177","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1631:17:177"},"returnParameters":{"id":88740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88739,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":88741,"src":"1672:7:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":88738,"name":"address","nodeType":"ElementaryTypeName","src":"1672:7:177","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1671:9:177"},"scope":88798,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":88751,"nodeType":"FunctionDefinition","src":"2507:104:177","nodes":[],"documentation":{"id":88742,"nodeType":"StructuredDocumentation","src":"1687:815:177","text":" @dev Sets the `implementer` contract as ``account``'s implementer for\n `interfaceHash`.\n `account` being the zero address is an alias for the caller's address.\n The zero address can also be used in `implementer` to remove an old one.\n See {interfaceHash} to learn how these are created.\n Emits an {InterfaceImplementerSet} event.\n Requirements:\n - the caller must be the current manager for `account`.\n - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n end in 28 zeroes).\n - `implementer` must implement {IERC1820Implementer} and return true when\n queried for support, unless `implementer` is the caller. See\n {IERC1820Implementer-canImplementInterfaceForAddress}."},"functionSelector":"29965a1d","implemented":false,"kind":"function","modifiers":[],"name":"setInterfaceImplementer","nameLocation":"2516:23:177","parameters":{"id":88749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88744,"mutability":"mutable","name":"account","nameLocation":"2548:7:177","nodeType":"VariableDeclaration","scope":88751,"src":"2540:15:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":88743,"name":"address","nodeType":"ElementaryTypeName","src":"2540:7:177","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":88746,"mutability":"mutable","name":"_interfaceHash","nameLocation":"2565:14:177","nodeType":"VariableDeclaration","scope":88751,"src":"2557:22:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":88745,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2557:7:177","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":88748,"mutability":"mutable","name":"implementer","nameLocation":"2589:11:177","nodeType":"VariableDeclaration","scope":88751,"src":"2581:19:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":88747,"name":"address","nodeType":"ElementaryTypeName","src":"2581:7:177","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2539:62:177"},"returnParameters":{"id":88750,"nodeType":"ParameterList","parameters":[],"src":"2610:0:177"},"scope":88798,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":88761,"nodeType":"FunctionDefinition","src":"3004:106:177","nodes":[],"documentation":{"id":88752,"nodeType":"StructuredDocumentation","src":"2617:382:177","text":" @dev Returns the implementer of `interfaceHash` for `account`. If no such\n implementer is registered, returns the zero address.\n If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n zeroes), `account` will be queried for support of it.\n `account` being the zero address is an alias for the caller's address."},"functionSelector":"aabbb8ca","implemented":false,"kind":"function","modifiers":[],"name":"getInterfaceImplementer","nameLocation":"3013:23:177","parameters":{"id":88757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88754,"mutability":"mutable","name":"account","nameLocation":"3045:7:177","nodeType":"VariableDeclaration","scope":88761,"src":"3037:15:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":88753,"name":"address","nodeType":"ElementaryTypeName","src":"3037:7:177","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":88756,"mutability":"mutable","name":"_interfaceHash","nameLocation":"3062:14:177","nodeType":"VariableDeclaration","scope":88761,"src":"3054:22:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":88755,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3054:7:177","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3036:41:177"},"returnParameters":{"id":88760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88759,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":88761,"src":"3101:7:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":88758,"name":"address","nodeType":"ElementaryTypeName","src":"3101:7:177","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3100:9:177"},"scope":88798,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":88769,"nodeType":"FunctionDefinition","src":"3317:86:177","nodes":[],"documentation":{"id":88762,"nodeType":"StructuredDocumentation","src":"3116:196:177","text":" @dev Returns the interface hash for an `interfaceName`, as defined in the\n corresponding\n https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP]."},"functionSelector":"65ba36c1","implemented":false,"kind":"function","modifiers":[],"name":"interfaceHash","nameLocation":"3326:13:177","parameters":{"id":88765,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88764,"mutability":"mutable","name":"interfaceName","nameLocation":"3356:13:177","nodeType":"VariableDeclaration","scope":88769,"src":"3340:29:177","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":88763,"name":"string","nodeType":"ElementaryTypeName","src":"3340:6:177","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3339:31:177"},"returnParameters":{"id":88768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88767,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":88769,"src":"3394:7:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":88766,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3394:7:177","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3393:9:177"},"scope":88798,"stateMutability":"pure","virtual":false,"visibility":"external"},{"id":88777,"nodeType":"FunctionDefinition","src":"3674:73:177","nodes":[],"documentation":{"id":88770,"nodeType":"StructuredDocumentation","src":"3409:260:177","text":" @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n @param account Address of the contract for which to update the cache.\n @param interfaceId ERC165 interface for which to update the cache."},"functionSelector":"a41e7d51","implemented":false,"kind":"function","modifiers":[],"name":"updateERC165Cache","nameLocation":"3683:17:177","parameters":{"id":88775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88772,"mutability":"mutable","name":"account","nameLocation":"3709:7:177","nodeType":"VariableDeclaration","scope":88777,"src":"3701:15:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":88771,"name":"address","nodeType":"ElementaryTypeName","src":"3701:7:177","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":88774,"mutability":"mutable","name":"interfaceId","nameLocation":"3725:11:177","nodeType":"VariableDeclaration","scope":88777,"src":"3718:18:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":88773,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3718:6:177","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3700:37:177"},"returnParameters":{"id":88776,"nodeType":"ParameterList","parameters":[],"src":"3746:0:177"},"scope":88798,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":88787,"nodeType":"FunctionDefinition","src":"4294:101:177","nodes":[],"documentation":{"id":88778,"nodeType":"StructuredDocumentation","src":"3753:536:177","text":" @notice Checks whether a contract implements an ERC165 interface or not.\n If the result is not cached a direct lookup on the contract address is performed.\n If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n {updateERC165Cache} with the contract address.\n @param account Address of the contract to check.\n @param interfaceId ERC165 interface to check.\n @return True if `account` implements `interfaceId`, false otherwise."},"functionSelector":"f712f3e8","implemented":false,"kind":"function","modifiers":[],"name":"implementsERC165Interface","nameLocation":"4303:25:177","parameters":{"id":88783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88780,"mutability":"mutable","name":"account","nameLocation":"4337:7:177","nodeType":"VariableDeclaration","scope":88787,"src":"4329:15:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":88779,"name":"address","nodeType":"ElementaryTypeName","src":"4329:7:177","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":88782,"mutability":"mutable","name":"interfaceId","nameLocation":"4353:11:177","nodeType":"VariableDeclaration","scope":88787,"src":"4346:18:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":88781,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4346:6:177","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"4328:37:177"},"returnParameters":{"id":88786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88785,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":88787,"src":"4389:4:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":88784,"name":"bool","nodeType":"ElementaryTypeName","src":"4389:4:177","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4388:6:177"},"scope":88798,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":88797,"nodeType":"FunctionDefinition","src":"4718:108:177","nodes":[],"documentation":{"id":88788,"nodeType":"StructuredDocumentation","src":"4401:312:177","text":" @notice Checks whether a contract implements an ERC165 interface or not without using or updating the cache.\n @param account Address of the contract to check.\n @param interfaceId ERC165 interface to check.\n @return True if `account` implements `interfaceId`, false otherwise."},"functionSelector":"b7056765","implemented":false,"kind":"function","modifiers":[],"name":"implementsERC165InterfaceNoCache","nameLocation":"4727:32:177","parameters":{"id":88793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88790,"mutability":"mutable","name":"account","nameLocation":"4768:7:177","nodeType":"VariableDeclaration","scope":88797,"src":"4760:15:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":88789,"name":"address","nodeType":"ElementaryTypeName","src":"4760:7:177","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":88792,"mutability":"mutable","name":"interfaceId","nameLocation":"4784:11:177","nodeType":"VariableDeclaration","scope":88797,"src":"4777:18:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":88791,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4777:6:177","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"4759:37:177"},"returnParameters":{"id":88796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88795,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":88797,"src":"4820:4:177","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":88794,"name":"bool","nodeType":"ElementaryTypeName","src":"4820:4:177","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4819:6:177"},"scope":88798,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IERC1820Registry","contractDependencies":[],"contractKind":"interface","documentation":{"id":88711,"nodeType":"StructuredDocumentation","src":"141:619:177","text":" @dev Interface of the global ERC1820 Registry, as defined in the\n https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n implementers for interfaces in this registry, as well as query support.\n Implementers may be shared by multiple accounts, and can also implement more\n than a single interface for each account. Contracts can implement interfaces\n for themselves, but externally-owned accounts (EOA) must delegate this to a\n contract.\n {IERC165} interfaces can also be queried via the registry.\n For an in-depth explanation and source code analysis, see the EIP text."},"fullyImplemented":false,"linearizedBaseContracts":[88798],"name":"IERC1820Registry","nameLocation":"771:16:177","scope":88799,"usedErrors":[],"usedEvents":[88719,88725]}],"license":"MIT"},"id":177}